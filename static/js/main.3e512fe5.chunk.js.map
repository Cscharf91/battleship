{"version":3,"sources":["components/Header.js","components/modules/Ship.js","components/modules/Gameboard.js","components/modules/shipLengths.js","components/modules/Player.js","App.js","index.js"],"names":["Header","className","Ship","length","x","y","direction","hits","sunk","isSunk","sunkStatus","takeHit","unshift","getLocations","locations","i","push","getHits","Gameboard","gridTemplate","grid","ships","j","checkShipLength","freeSpace","getCoords","setCoords","value","checkForWin","sunkShips","forEach","ship","getGrid","placeShip","receiveAttack","location","console","log","getShips","shipLengths","Player","type","board","enemyBoard","moves","tryToPlaceShip","iteration","Math","floor","random","getRandomCoords","randomX","randomY","getBoard","getEnemyBoard","cpuPlaceShips","makeRandomPlay","getMoves","App","useState","p1Board","p2Board","setP2Board","p1","p2","p1Grid","setP1Grid","p2Grid","setP2Grid","p1Sinks","setP1Sinks","setDirection","instruction","setInstruction","p1GridClick","e","parseInt","target","id","shift","renderP1Board","btn","document","querySelector","parentNode","removeChild","renderP2Board","useEffect","newP1Grid","coords","key","onClick","p2Guess","split","prevNum","newGrid","window","reload","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3e512fe5.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = () => {\n    return (\n        <header className=\"app-header\">\n            <h3>Battleship</h3>\n            <p className=\"created-by\">By Cory S.</p>\n        </header>\n    );\n}\n\nexport default Header;","const Ship = (length, x, y, direction) => {\n    let hits = [];\n    let sunk = false;\n    const sunkStatus = () => sunk;\n\n    const takeHit = () => {\n        hits.unshift('X');\n        if (isSunk()) return 'sunk';\n    };\n\n    const getHits = () => hits;\n\n    const getLocations = () => {\n        let locations = [];\n        if (direction === 'horizontal') {\n            for (let i = 0; i < length; i++) {\n                locations.push([x + i, y]);\n            }\n        }\n        return locations;\n    }\n\n    const isSunk = () => {\n        if (hits.length === length) {\n            sunk = true;\n            return true;\n        }\n    }\n\n    return { length, sunkStatus, takeHit, hits, getLocations, getHits };\n}\n\nexport default Ship;","import Ship from './Ship';\n\nconst Gameboard = (gridTemplate) => {\n    let grid = gridTemplate;\n    let ships = [];\n    if (grid.length === 0) {\n        for(let i = 0;  i < 10; i++) {\n            grid.push([]);\n            for(let j = 0; j < 10; j++) {\n                grid[i].push('');\n            }\n        }\n    }\n    const getGrid = () => {\n        return grid;\n    }\n\n    const getShips = () => ships;\n\n    const checkShipLength = (x, y, length, direction) => {\n        let freeSpace = true;\n        if ((direction === 'horizontal' && x + length > 10) || (direction === 'vertical' && y + length > 10) || x > 9 || y > 9) {\n            freeSpace = false;\n        } else if (direction === 'horizontal' && x + length < 10) {\n            for (let i = 0; i < length; i++) {\n                let coords = getCoords(x + i, y)\n                if (coords !== '') {\n                    freeSpace = false;\n                }\n                if (freeSpace === false) return;\n            }\n        } else if (direction === 'vertical' && y + length < 10) {\n            for (let i = 0; i < length; i++) {\n                let coords = getCoords(x, y + i)\n                if (coords !== '') {\n                    freeSpace = false;\n                }\n                if (freeSpace === false) return;\n            }\n        }\n        return freeSpace;\n    }\n\n    const placeShip = (x, y, length, direction) => {\n        if (checkShipLength(x, y, length, direction)) {\n            const ship = Ship(length, x, y);\n            ships.push(ship);\n            setCoords(x, y, ship, direction);\n            return 'placed';\n        }\n    }\n\n    const getCoords = (x, y) => {\n        return grid[y][x];\n    }\n\n    const setCoords = (x, y, value, direction) => {\n        if (direction === 'horizontal') {\n            for (let i = 0; i < value.length; i++) {\n                grid[y][x + i] = value;\n            }\n        } else if (direction === 'vertical') {\n            for (let i = 0; i < value.length; i++) {\n                grid[y + i][x] = value;\n            }\n        } else if (direction === null) {\n            grid[y][x] = value;\n        }\n    }\n\n    const checkForWin = () => {\n        let sunkShips = [];\n        ships.forEach(ship => {\n            if (ship.sunkStatus() === true) sunkShips.push(ship);\n        })\n        if (sunkShips.length === ships.length) return true;\n        return false;\n    }\n\n    const receiveAttack = (x, y) => {\n        let location = getCoords(x, y);\n        if (location === '') {\n            setCoords(x, y, 'X', null);\n            return getCoords(x, y);\n        } else if (location !== '' && location !== 'X' && location !== 'XX') {\n            const ship = getCoords(x, y);\n            setCoords(x, y, 'XX', null);\n            if (ship.takeHit() === 'sunk') {\n                console.log(`ship: ${ship.getHits()}`);\n                // setCoords(x, y, 'XX', null);\n                if (checkForWin() === true) return 'Winner!';\n                return 'sunk';\n            }\n            // return getCoords(x, y);\n        }\n    }\n\n    return { getGrid, getCoords, placeShip, receiveAttack, getShips, checkShipLength, checkForWin }\n}\n\nexport default Gameboard;","const shipLengths = [5, 4, 4, 3, 3, 2, 2, 2, 2]\n\nexport default shipLengths;","import shipLengths from './shipLengths';\n\nconst Player = (type, board, enemyBoard) => {\n    let moves = [];\n    const getMoves = () => moves;\n    const getBoard = () => board;\n    const getEnemyBoard = () => enemyBoard;\n    const cpuPlaceShips = () => {\n        for (let i = 0; i < shipLengths.length; i++) {\n            tryToPlaceShip(i);\n        }\n        // console.log(board.getGrid());\n    }\n\n    const tryToPlaceShip = (iteration) => {\n        const length = shipLengths[iteration];\n        const direction = Math.floor(Math.random() * (2 - 0)) > 0.5 ? 'horizontal' : 'vertical';\n        const [x, y] = getRandomCoords(length, direction);\n        board.placeShip(x, y, length, direction);\n        // console.log(board.getCoords(x, y));\n    }\n\n    const makeRandomPlay = () => {\n        let randomX = Math.floor(Math.random() * (10 - 0));\n        let randomY = Math.floor(Math.random() * (10 - 0));\n        let repeat;\n        if (enemyBoard.getCoords(randomX, randomY) === 'X' || enemyBoard.getCoords(randomX, randomY) === 'XX') {\n            makeRandomPlay();\n        } else if (enemyBoard.receiveAttack(randomX, randomY) === 'Winner!') {\n            console.log('WINNER!!');\n            return 'win';\n        } else {\n            moves.push([randomX, randomY]);\n        }\n    }\n\n    const getRandomCoords = (length, direction) => {\n        let randomX = Math.floor(Math.random() * (10 - 0));\n        let randomY = Math.floor(Math.random() * (10 - 0));\n        while (!board.checkShipLength(randomX, randomY, length, direction)) {\n            randomX = Math.floor(Math.random() * (10 - 0));\n            randomY = Math.floor(Math.random() * (10 - 0));\n        }\n        return [randomX, randomY]; \n    }\n    return { type, getBoard, getEnemyBoard, cpuPlaceShips, makeRandomPlay, getMoves }\n}\n\nexport default Player;","import React, { useEffect, useState } from 'react';\nimport Header from './components/Header';\nimport './App.css';\nimport Gameboard from './components/modules/Gameboard';\nimport Player from './components/modules/Player';\nimport Ship from './components/modules/Ship';\nimport shipLengths from './components/modules/shipLengths';\n\nfunction App() {\n\n  const [p1Board, setP1Board] = useState(Gameboard([]));\n  const [p2Board, setP2Board] = useState(Gameboard([]));\n  const [p1, setP1] = useState(Player('human', p1Board, p2Board));\n  const [p2, setP2] = useState(Player('cpu', p2Board, p1Board));\n  const [p1Grid, setP1Grid] = useState([]);\n  const [p2Grid, setP2Grid] = useState([]);\n  const [p1Sinks, setP1Sinks] = useState(0);\n  const [direction, setDirection] = useState('horizontal');\n  const [instruction, setInstruction] = useState('Place your ship (on the left board): 5 length');\n\n  const resetGame = () => {\n    window.location.reload(false);\n  }\n\n  const p1GridClick = (e) => {\n    const [x, y] = [parseInt(e.target.id[0]), parseInt(e.target.id[1])]\n    if (p1.getBoard().getShips().length < 9) {\n      if (shipLengths.length > 0) {\n        if (p1Board.placeShip(x, y, shipLengths[0], direction) === 'placed') {\n          shipLengths.shift();\n          renderP1Board();\n          if (shipLengths.length > 0) {\n            setInstruction(`Place your ship (on the left board): ${shipLengths[0]} length`)\n          } else {\n            const btn = document.querySelector(\".rotate-btn\");\n            btn.parentNode.removeChild(btn);\n            setInstruction(`Make guesses on the right board:`)\n            p2.cpuPlaceShips();\n            console.log(p2.getBoard().getGrid());\n            setP2Board(p2.getBoard());\n            renderP2Board();\n          }\n        }\n      }\n    }\n  }\n\n  useEffect(() => {\n    renderP1Board();\n  }, [direction]);\n\n  useEffect(() => {\n    p2.cpuPlaceShips();\n    p2Board.getGrid();\n    renderP2Board();\n  }, [])\n\n  const flipDirection = () => {\n    direction === 'horizontal' ? setDirection('vertical') : setDirection('horizontal');\n  }\n\n  const renderP1Board = () => {\n    const newP1Grid = [];\n    for(let i = 0;  i < 10 ; i++) {\n      for(let j = 0; j < 10; j++) {\n        const coords = p1Board.getCoords(j, i);\n        if (coords === '') {\n          newP1Grid.push(<div className=\"cell\" key={`p1 ${j}, ${i}`} id={j + '' + i} onClick={p1GridClick}></div>);\n        } else if (coords === 'X') {\n          newP1Grid.push(<div className=\"cell attacked\" key={`p1 ${j}, ${i}`} id={j + '' + i} ></div>);\n        } else if (coords === 'XX') {\n          newP1Grid.push(<div className=\"cell hit\" key={`p1 ${j}, ${i}`} id={j + '' + i} ></div>);\n        } else {\n          newP1Grid.push(<div className=\"cell p1-ship\" key={`p1 ${j}, ${i}`} id={j + '' + i} onClick={p1GridClick}></div>);\n        }\n      }\n    }\n    setP1Grid(newP1Grid);\n  }\n\n  const p1Guess = () => {\n    p2.makeRandomPlay()\n    if (p1.getBoard().checkForWin()) {\n      setInstruction('CPU wins!');\n    }\n    renderP1Board();\n  }\n\n  const p2Guess = (e) => {\n    if (p1.getBoard().getShips().length < 9) return;\n    const target = e.target.id;\n    target.split('');\n    const [x, y] = [target[0], target[1]];\n    // console.log(p2Board.receiveAttack(x, y));\n    if (p2Board.receiveAttack(x, y) === 'sunk') setP1Sinks(prevNum => prevNum + 1);\n    if (p2.getBoard().checkForWin()) {\n      renderP2Board();\n      setInstruction('Player 1 wins!');\n    } else {\n      renderP2Board();\n      p1Guess();\n    }\n  }\n\n  const renderP2Board = () => {\n    const newGrid = [];\n    for(let i = 0;  i < 10 ; i++) {\n      for(let j = 0; j < 10; j++) {\n        const coords = p2Board.getCoords(j, i);\n        if (coords === 'X') {\n          newGrid.push(<div className=\"cell attacked\" key={`p1 ${j}, ${i}`} id={j + '' + i}></div>);\n        } else if (coords === 'XX') {\n          newGrid.push(<div className=\"cell hit\" key={`p1 ${j}, ${i}`} id={j + '' + i}></div>);\n        } else {\n          newGrid.push(<div className=\"cell\" key={`p1 ${j}, ${i}`} id={j + '' + i} onClick={p2Guess}></div>);\n        }\n      }\n    }\n    setP2Grid(newGrid);\n  } \n\n  return (\n    <div className=\"App\">\n      <Header />\n      <div className=\"instructions\">\n        <p>{instruction}</p>\n        <p>Ships Sunk: {p1Sinks}</p>\n        <button className=\"rotate-btn\" onClick={flipDirection}>Ship is: {direction}. Click to rotate.</button><br />\n        <button className=\"reset-btn\" onClick={resetGame}>Restart</button>\n      </div>\n      <div className=\"player-grids-container\">\n        <div className=\"board-grid\">\n          {p1Grid}\n        </div>\n        <div className=\"board-grid\">\n          {p2Grid}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}